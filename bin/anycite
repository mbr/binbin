#!/usr/bin/python3
#
# anycite: Create biblatex sources from URLs and other data
#
# Copyright (c) 2016 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import sys

import click
import requests


class Handler(object):
    @classmethod
    def can_handle(cls, arg):
        raise NotImplementedError

    @classmethod
    def handle(cls, arg):
        raise NotImplementedError


class ISBNHandler(Handler):
    # uses Manas Tungare's ISBN-to-BibTeX converter
    # http://manas.tungare.name/software/isbn-to-bibtex/
    #
    # should probably create our own implementation here at some point

    LOOKUP_URL = 'http://php.chimbori.com/_php/isbn/isbn-bibtex'

    @classmethod
    def can_handle(cls, arg):
        arg = arg.replace('-', '').replace(' ', '')
        arg.rstrip('X')

        return (len(arg) == 10 or len(arg) == 13) and arg.isnumeric()

    @classmethod
    def handle(cls, arg):
        arg = arg.replace('-', '').replace(' ', '')
        arg.rstrip('X')

        resp = requests.post(cls.LOOKUP_URL, data={'isbn': arg})
        resp.raise_for_status()

        return resp.text


HANDLERS = [ISBNHandler]


@click.command()
@click.argument('location')
def anycite(location):
    for handler in HANDLERS:
        if handler.can_handle(location):
            result = handler.handle(location)
            break
    else:
        click.echo("No handler for location: {}".format(location))
        sys.exit(1)

    click.echo(result)


if __name__ == '__main__':
    anycite()
