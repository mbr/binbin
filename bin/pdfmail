#!/usr/bin/env python3

# Copyright (c) 2016 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# pdfmail: Downsamples a PDF to make it suitable for sending via email

import os
import subprocess

import click


@click.command()
@click.option('-o',
              '--output',
              type=click.Path(dir_okay=False,
                              writable=True),
              help='Output filename [default: INPUT-lowres.pdf',
              default=None)
@click.option('--gs', default='gs', help='Name of ghostscript binary')
@click.option('-r',
              '--resolution',
              default=72,
              help='Resolution in dpi to downsample to')
@click.option('-j', '--jpeg-quality', default=75, help='JPEG quality setting')
@click.option('-g',
              '--grayscale',
              default=False,
              is_flag=True,
              help='Convert to grayscale')
@click.argument('input')
def pdfmail(output, input, gs, resolution, jpeg_quality, grayscale):
    if not output:
        base, ext = os.path.splitext(input)
        output = base + '-lowres' + ext

    cmd = [gs,
           '-o',
           output,
           '-sDEVICE=pdfwrite',
           '-dDownsampleColorImages=true',
           '-dDownsampleGrayImages=true',
           '-dDownsampleMonoImages=true',
           '-dColorImageResolution={}'.format(resolution),
           '-dGrayImageResolution={}'.format(resolution),
           '-dMonoImageResolution={}'.format(resolution),
           '-dColorImageDownsampleThreshold=1.0',
           '-dGrayImageDownsampleThreshold=1.0',
           '-dMonoImageDownsampleThreshold=1.0',
           '-dJPEGQ={}'.format(jpeg_quality),
           '-dCompatibilityLevel=1.4',
           '-r{}'.format(resolution), ]

    if grayscale:
        cmd.extend(['-sProcessColorModel=DeviceGray',
                    '-sColorConversionStrategy=Gray',
                    '-dOverrideICC', ])

    cmd.append(input)
    size_before = os.stat(input).st_size
    subprocess.check_call(cmd)
    size_after = os.stat(output).st_size

    click.echo('{}: {}K -> {}K'.format(output,
                                       size_before // 1024,
                                       size_after // 1024, ))


if __name__ == '__main__':
    pdfmail()
