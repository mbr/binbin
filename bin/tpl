#!/usr/bin/python3

# tpl: Creates files from flexible templates.

# Copyright (c) 2015 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from collections import OrderedDict, ChainMap
import configparser
import os
import re
import sys

import click
from jinja2 import Environment, FileSystemLoader, meta


class TplConfig(configparser.ConfigParser):
    @classmethod
    def get_config_path(cls):
        return os.path.join(click.get_app_dir('tpl'), 'tpl.conf')

    @classmethod
    def load_user_config(cls):
        cfg = cls()
        cfg.read(cls.get_config_path())

        return cfg

    def save_user_config(self):
        self.ensure_configfile()

        with open(self.get_config_path(), 'w') as out:
            self.write(out)

    @classmethod
    def ensure_configfile(cls):
        config_fn = cls.get_config_path()
        config_dir = os.path.dirname(config_fn)

        if not os.path.exists(config_dir):
            os.makedirs(config_dir)

        if not os.path.exists(config_fn):
            with open(config_fn, 'w') as out:
                out.write('')

        return config_fn


class Template(object):
    def __init__(self, name, fn_exp=None, path=None, tpl_fn=None, defaults={}):
        self.name = name
        self.fn_exp = fn_exp
        self.path = path
        self.tpl_fn = tpl_fn
        self.defaults = defaults

        # template environment
        self.env = Environment(loader=FileSystemLoader(path))

    def get_vars(self):
        tpl_src = self.env.loader.get_source(self.env, self.tpl_fn)
        ast = self.env.parse(tpl_src, filename=self.tpl_fn)
        return meta.find_undeclared_variables(ast)

    # def render_filename(self, **vars):
    #     tpl = self.env.from_string(self.tpl_fn)

    #     return tpl.render(**vars)

    def render_file(self, **vars):
        # check if we need to append a newline
        src, path, _ = self.env.loader.get_source(self.env, self.tpl_fn)
        newline = '\n' if src.endswith('\n') else ''

        # render
        tpl = self.env.get_template(self.tpl_fn)
        return tpl.render(**vars) + newline

    @classmethod
    def load(cls, path):
        conf_fn = os.path.join(path, 'tpl.conf')

        config = configparser.ConfigParser()
        config.read(conf_fn)

        fn_exp = config['Template'].get('match', None)
        if fn_exp:
            fn_exp = re.compile(fn_exp)

        name = config['Template'].get('name', os.path.basename(path))

        defaults = config['Defaults'] if 'Defaults' in config else {}

        return cls(name,
                   fn_exp=fn_exp,
                   path=path,
                   tpl_fn=config['Template']['file'],
                   defaults=defaults)


class TemplateManager(object):
    def __init__(self):
        self.tpls = OrderedDict()

    def load_templates(self, *paths):
        for path in paths:
            for d in os.listdir(path):
                dn = os.path.join(path, d)
                if not os.path.isdir(dn) or d in ('.', '..'):
                    continue

                if not dn in self.tpls:
                    self.tpls[dn] = Template.load(dn)

    def iter_templates(self):
        return iter(self.tpls.values())

    def match_template_name(self, name):
        matches = []

        for tpl in self.iter_templates():
            if tpl.name == name:
                matches.append(tpl)

        return matches

    def match_filename(self, name):
        matches = []

        for tpl in self.iter_templates():
            m = tpl.fn_exp.match(name)

            if m:
                name = m.group(1) if tpl.fn_exp.groups else m.group(0)
                matches.append((name, tpl))

        return matches


def load_templates(paths):
    tpls = []
    for path in paths:
        for d in os.listdir(path):
            dn = os.path.join(path, d)
            if not os.path.isdir(dn) or d in ('.', '..'):
                continue

            tpls.append(Template.load(dn))
    return tpls


@click.group()
@click.option('-p', '--template-path',
              default=None,
              envvar='TPL_TEMPLATE_PATH')
@click.pass_obj
def cli(obj, template_path):
    obj['TEMPLATE_PATH'] = []

    if template_path:
        obj['TEMPLATE_PATH'] = template_path.split(os.pathsep)

    manager = TemplateManager()
    manager.load_templates(*obj['TEMPLATE_PATH'])
    obj['MANAGER'] = manager

    # load configuration
    obj['CONFIG'] = TplConfig.load_user_config()


@cli.group('config', help='Manage configuration')
def cfg():
    pass


@cfg.command('show', help='Show configuration')
@click.pass_obj
def cfg_show(obj):
    config_fn = obj['CONFIG'].get_config_path()

    if not os.path.exists(config_fn):
        click.echo('Configuration file {} not found'.format(config_fn),
                   err=True)
        sys.exit(1)

    with open(config_fn) as cf:
        click.echo(cf.read(), nl=False)


@cfg.command('edit', help='Open configuration in default editor')
@click.pass_obj
def cfg_edit(obj):
    click.edit(filename=obj['CONFIG'].ensure_configfile())


@cfg.command('set', help='Set default value')
@click.option('-t', '--tpl',
              default='*',
              help='Template to set value for (default: global)')
@click.argument('key')
@click.argument('value')
@click.pass_obj
def cfg_set(obj, tpl, key, value):
    config = obj['CONFIG']

    if tpl not in config:
        config[tpl] = {}

    config[tpl][key] = value

    config.save_user_config()


@cfg.command('unset', help='Drop a configuration value')
@click.option('-t', '--tpl',
              default='*',
              help='Template to set value for (default: global)')
@click.argument('key')
@click.pass_obj
def cfg_unset(obj, tpl, key):
    config = obj['CONFIG']

    if tpl not in config:
        return

    if key in config[tpl]:
        del config[tpl][key]

    if not config[tpl]:
        del config[tpl]

    config.save_user_config()


@cli.command(help='Display template search paths')
@click.pass_obj
def path(obj):
    for path in obj['TEMPLATE_PATH']:
        click.echo(path)


@cli.command(help='List all templates found')
@click.pass_obj
def list(obj):
    for tpl in obj['MANAGER'].iter_templates():
        click.secho(tpl.name, fg='green')

        def print_attr(k, v):
            click.echo('{:>10s}: {}'.format(k, v))

        print_attr('path', tpl.path)

        if tpl.fn_exp:
            print_attr('match', tpl.fn_exp.pattern)

        print_attr('variables', sorted(tpl.get_vars()))


@cli.command(help='Create new file from template')
@click.argument('dest', type=click.Path(exists=False, dir_okay=False))
@click.option('-t', '--tpl', 'tpl_name', help='Template type')
@click.pass_obj
def new(obj, dest, tpl_name):
    config = obj['CONFIG']

    tpl = None
    if tpl_name is not None:
        matches = obj['MANAGER'].match_template_name(tpl_name)

        if not matches:
            click.echo('No template named \'{}\' found.'.format(tpl_name),
                       err=True)
            sys.exit(1)

        if len(matches) > 1:
            click.echo(
                'Multiple matches found for template name \'{}\'.'.format(
                    tpl_name),
                err=True)
            sys.exit(1)

        tpl = matches[0]
        name = os.path.basename(dest)

    if os.path.exists(dest):
        click.echo('File exists: {}'.format(dest), err=True)
        sys.exit(1)

    # select a template
    if tpl is None:
        matches = obj['MANAGER'].match_filename(dest)

        if not matches:
            click.echo(
                'No matching template found for filename \'{}\''.format(dest),
                err=True)
            sys.exit(1)

        if len(matches) > 1:
            click.echo(
                'Multiple matches found for filename \'{}\':'.format(dest),
                err=True)
            for name, tpl in matches:
                click.echo('{}: {}'.format(tpl.name, name))
            sys.exit(1)

        # we've got one exactly match
        name, tpl = matches[0]

    missing_vars = tpl.get_vars()

    vars = {'name': name}

    # we've got the name already from the filename
    missing_vars.discard('name')

    # set up lookup chain for defaults
    defaults = ChainMap(tpl.defaults)

    if tpl.name in config:
        defaults.maps.append(config[tpl.name])
    if '*' in config:
        defaults.maps.append(config['*'])

    # collect missing variables
    for varname in sorted(missing_vars):
        vars[varname] = click.prompt(
            '{} {}'.format(name, click.style(varname,
                                             fg='yellow')),
            default=defaults.get(varname, ''))

    with open(dest, 'w') as out:
        out.write(tpl.render_file(**vars))

    click.echo('creating new {} "{}" in {}'.format(tpl.name, name,
                                                   click.style(dest,
                                                               fg='green')))


if __name__ == '__main__':
    cli(obj={})
