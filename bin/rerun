#!/usr/bin/python3

# argparse, because we don't want external dependenceis

import click
import subprocess
import sys
import time

QUIET = False


def banner(text):
    w, h = click.get_terminal_size()

    lines = []
    hr = ' ' * w

    lines.append(hr)

    l = len(text)
    if 6 < (w - 2) < l:
        l = w - 6
        text = text[:l] + '...'
        l += 3

    padding = max(0, (w - 2) - l)
    pad_left = padding // 2
    pad_right = padding // 2 + padding % 2

    lines.append(' ' + ' ' * pad_left + text + ' ' * pad_right + ' ')

    lines.append(hr)

    return '\n'.join(lines)


def exit_err(msg, exitcode=1):
    click.secho(msg, file=sys.stderr, fg='red')
    sys.exit(exitcode)


def info(msg):
    if not QUIET:
        click.echo(click.style('#', fg='cyan', bold=True) + ' ' + msg)


@click.command()
@click.argument('cmd', nargs=-1)
@click.option('-f',
              '--file',
              'files',
              multiple=True,
              default=['.'],
              help='file or dir to watch (default: .)')
@click.option('-q',
              '--quiet',
              is_flag=True,
              default=False,
              help='Suppress all output not generated by the command itself')
@click.option('-c',
              '--clear',
              is_flag=True,
              default=False,
              help='Clear screen before executing command')
@click.option('-C',
              '--clear-and-banner',
              is_flag=True,
              default=False,
              help='Clear screen and output banner before executing command')
def cli(files, cmd, quiet, clear, clear_and_banner):
    global QUIET
    QUIET = quiet

    if not cmd:
        exit_err('missing command')
        sys.exit(1)

    inotify_args = [
        'inotifywait',
        '--recursive',
        '--quiet',
        '--event',
        'modify,create,delete,move',
    ]

    inotify_args.extend(files)
    run_count = 0
    cmd_name = ' '.join(cmd)

    while True:
        run_count += 1
        if clear or clear_and_banner:
            click.clear()

            if clear_and_banner:
                banner_text = '{:6d} : {}'.format(run_count, cmd_name)
                click.secho(
                    banner(banner_text),
                    bg='blue',
                    fg='white',
                    bold=True)
            sys.stdout.flush()

        # run command
        info('running ' + click.style('{}'.format(cmd_name), fg='yellow'))

        start = time.time()
        p = subprocess.Popen(cmd)
        p.wait()
        total = time.time() - start

        # watch for changes
        total_s = click.style('{:.4}s'.format(total),
                              fg='green' if p.returncode == 0 else 'red')
        status_s = click.style(
            'ok',
            fg='green') if p.returncode == 0 else click.style(
                'err({})'.format(p.returncode),
                fg='red')

        info(status_s + ', took {} seconds. waiting for changes...'.format(
            total_s))

        p = subprocess.Popen(
            inotify_args,
            stderr=None if not quiet else open('/dev/null', 'wb'),
            stdout=None if not quiet else open('/dev/null', 'wb'))
        p.wait()

        if p.returncode != 0:
            exit_err('inotifywait failed: {}/{}'.format(p.stdout, p.stderr))


if __name__ == '__main__':
    cli()
