#!/usr/bin/python3

# dhg: Docker hot garbage

# Copyright (c) 2016 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from functools import partial
import sys

import click
from docker import Client
from docker.errors import APIError


def fmt_image(repo):
    return '{} [{}]'.format(repo['Id'], ', '.join(repo['RepoTags']))


def fmt_image_short(repo):
    return repo['Id'][:7]


class AppState(object):
    yes = False

    def confirm(self, *args, **kwargs):
        if self.yes:
            return True

        return click.confirm(*args, **kwargs)

    def confirm_or_exit(self, *args, **kwargs):
        if not self.confirm(*args, **kwargs):
            sys.exit(1)
            raise RuntimeError('Unreachable')

        return True


@click.group()
@click.option('--docker-host',
              '-h',
              envvar='DOCKER_HOST',
              default='unix://var/run/docker.sock')
@click.option('--verbose', '-v', is_flag=True)
@click.option('--yes', '-y', is_flag=True)
@click.pass_context
def cli(ctx, docker_host, verbose, yes):
    def _noop(s):
        pass

    info = _noop

    if verbose:
        info = partial(click.echo, err=True)
        info('Docker host: {}'.format(docker_host))

    cl = Client(base_url=docker_host)
    ctx.obj = AppState()
    ctx.obj.cl = cl
    ctx.obj.info = info
    ctx.obj.yes = yes


@cli.command()
@click.pass_obj
def prune(app):
    all_images = {img['Id']: img for img in app.cl.images(all=True)}

    to_remove = []

    for id, img in all_images.items():
        if img['RepoTags'] == ['<none>:<none>']:
            to_remove.append(id)
            continue

        app.info('skip: {}'.format(fmt_image(img)))

    def parent_depth(img):
        if not img.get('ParentId', None):
            return 0

        return 1 + parent_depth(all_images[img['ParentId']])

    # sort images by tree depth, remove leaves first
    to_remove.sort(key=lambda id: (parent_depth(all_images[id]), id),
                   reverse=True)

    for id in to_remove:
        click.echo(fmt_image(all_images[id]))

    # get all
    app.confirm_or_exit('Prune untagged images?')

    errors = []

    with click.progressbar(to_remove,
                           label='Removing images',
                           show_pos=True) as bar:
        for id in bar:
            try:
                # use noprune, because we will remove parents anyway later on
                app.cl.remove_image(id, noprune=True)
            except APIError as e:
                errors.append((id, e))

    if errors:
        click.echo('Could not remove all untagged images:', err=True)

        for id, err in errors:
            click.echo('{}: {}'.format(id, err), err=True)


if __name__ == '__main__':
    cli()
