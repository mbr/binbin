#!/usr/bin/python3

# dhg: Docker hot garbage

# Copyright (c) 2016 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from functools import partial
import os
import re
import sys

import arrow
import click
from docker import Client


# from http://stackoverflow.com/questions/1175208/elegant-python-function-
#      to-convert-camelcase-to-snake-case
def case_convert(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


def fmt_image(repo):
    return '{} [{}]'.format(repo['Id'], ', '.join(repo['RepoTags']))


def fmt_container(cnr):
    return '{} [{}]'.format(cnr['Id'], ', '.join(cnr['Names']))


def fmt_container_short(cnr):
    return cnr['Id'][:12]


def fmt_image_short(repo):
    return repo['Id'][:12]


class AppState(object):
    yes = False

    def confirm(self, *args, **kwargs):
        if self.yes:
            return True

        return click.confirm(*args, **kwargs)

    def confirm_or_exit(self, *args, **kwargs):
        if not self.confirm(*args, **kwargs):
            sys.exit(2)
            raise RuntimeError('Unreachable')

        return True


def convert_dict(data, arrow_fields=[]):
    rv = {}

    for key, val in data.items():
        rv[case_convert(key)] = arrow.get(val) if key in arrow_fields else val

    return rv


def convert_list(items, arrow_fields=[]):
    return [convert_dict(item, arrow_fields) for item in items]


def convert_attr(obj, *args, **kwargs):
    for key, val in convert_dict(*args, **kwargs).items():
        setattr(obj, key, val)


class Container(object):
    def __init__(self, data, inspect_data=None):
        self.ports = convert_list(data.pop('Ports'))

        convert_attr(self, data)

        if inspect_data:
            self.state = convert_dict(
                inspect_data.pop('State'),
                arrow_fields=['StartedId', 'FinishedAt'])
            self.network_settings = convert_dict(inspect_data.pop(
                'NetworkSettings'))
            self.config = convert_dict(inspect_data.pop('Config'))
            self.host_config = convert_dict(inspect_data.pop('HostConfig'))
            convert_attr(self, inspect_data)

        self.cname = self.name.lstrip('/')

    def __repr__(self):
        return 'Container({})'.format(self.id[:7])


class Image(object):
    def __init__(self, data, inspect_data=None):
        convert_attr(self, data)

        if inspect_data:
            self.container_config = convert_dict(inspect_data.pop(
                'ContainerConfig'))
            convert_attr(self, inspect_data, arrow_fields=['Created'])

    def __repr__(self):
        return 'Image({})'.format(self.id[:7])


class Volume(object):
    def __init__(self, image, path):
        self.image = image
        self.path = path

    def __repr__(self):
        return 'Volume({} on {!r})'.format(self.path, self.image)


class DockerHost(object):
    def __init__(self, client):
        self.client = client
        self.refresh()

    def refresh(self):
        self.containers = {}
        for data in self.client.containers():
            self.containers[data['Id']] = Container(
                data, self.client.inspect_container(data['Id']))

        self.images = {}
        for data in self.client.images():
            self.images[data['Id']] = Image(
                data, self.client.inspect_image(data['Id']))

    def get_container_by_name(self, name):
        for container in self.containers.values():
            if container.cname == name:
                return container

    def find_images_by_tags(self, repo=None, tag=None):
        rv = []
        for image in self.images.values():
            for rt in image.repo_tags:
                r, t = rt.split(':', 1)
                if (repo is None or r == repo) and (tag is None or t == tag):
                    rv.append(image)
                    break
        return rv

    def find_by_ident(self, ident):
        # try precise matches by id first
        if ident in self.containers:
            return [self.containers[ident]]

        if ident in self.images:
            return [self.images[ident]]

        # exact matches by name
        m = self.get_container_by_name(ident)
        if m:
            return [m]

        candidates = []

        if ':' in ident:
            repo, tag = ident.split(':', 1)
            return self.find_images_by_tags(repo, tag)

        # container ids
        candidates.extend(c
                          for id, c in self.containers.items()
                          if id.startswith(ident))

        # image ids
        candidates.extend(im
                          for id, im in self.images.items()
                          if id.startswith(ident))

        # look inside containers for volumes
        for container in self.containers.values():
            for path, host_path in container.volumes.items():
                vol_id = os.path.split(host_path)[-1]

                if vol_id.startswith(ident):
                    candidates.append(Volume(container, path))

        return candidates


@click.group()
@click.option('--docker-host',
              '-h',
              envvar='DOCKER_HOST',
              default='unix://var/run/docker.sock')
@click.option('--verbose', '-v', is_flag=True)
@click.option('--yes', '-y', is_flag=True)
@click.pass_context
def cli(ctx, docker_host, verbose, yes):
    def _noop(s):
        pass

    info = _noop

    if verbose:
        info = partial(click.echo, err=True)
        info('Docker host: {}'.format(docker_host))

    def exit_err(msg):
        click.echo(msg, err=True)
        sys.exit(1)

    cl = Client(base_url=docker_host)
    ctx.obj = AppState()
    ctx.obj.cl = cl
    ctx.obj.info = info
    ctx.obj.yes = yes
    ctx.obj.exit_err = exit_err


@cli.command(
    'remove-untagged',
    help='Removes all untagged images that are not dependencies of tagged '
    'images')
@click.option('--force', '-f', is_flag=True)
@click.pass_obj
def remove_untagged(app, force):
    def parent_depth(img):
        if not img.get('ParentId', None):
            return 0

        return 1 + parent_depth(all_images[img['ParentId']])

    all_images = {img['Id']: img for img in app.cl.images(all=True)}

    tagged = set()

    for id, img in all_images.items():
        if img['RepoTags'] != ['<none>:<none>']:
            tagged.add(id)

            # image itself is tagged, add all parents as tagged as well
            parent_id = img['ParentId']

            while parent_id:
                tagged.add(parent_id)
                img = all_images[parent_id]
                parent_id = img['ParentId']

    untagged = list(sorted(
        set(all_images.keys()) - tagged,
        key=lambda id: parent_depth(all_images[id]),
        reverse=True))
    tagged = list(sorted(tagged,
                         key=lambda id: parent_depth(all_images[id]),
                         reverse=True))

    for img in sorted(tagged):
        app.info('tagged: {}'.format(fmt_image(all_images[img])))

    app.confirm_or_exit('Remove {} untagged images, keeping {} tagged or '
                        'intermediate images?'.format(
                            len(untagged), len(all_images) - len(untagged)))

    with click.progressbar(untagged,
                           label='Removing images',
                           show_pos=True) as bar:
        for id in bar:
            # use noprune, because we will remove parents anyway later on
            app.cl.remove_image(id, noprune=True, force=force)


@cli.command(
    'remove-stopped',
    help='Removes all containers that are not running and are based on an '
    'untagged image, then removes all untagged images. Images with '
    'tagged children are also considered tagged.')
@click.pass_obj
def remove_stopped(app):
    # next, gather stopped containers based on untagged images
    all_containers = {cnr['Id']: cnr for cnr in app.cl.containers(all=True)}

    stopped = []
    for id, cnr in all_containers.items():
        if cnr['Status'] and not cnr['Status'].startswith('Exited'):
            app.info('running: {}'.format(fmt_container(cnr)))
            continue  # container is not stopped

        stopped.append(id)

    for ctn in stopped:
        app.info(fmt_container(all_containers[ctn]))

    app.confirm_or_exit(
        'Remove {} stopped containers, keeping {} running container?'.format(
            len(stopped), len(all_containers) - len(stopped)))

    with click.progressbar(stopped,
                           label='Removing containers',
                           show_pos=True) as bar:
        for id in bar:
            # use noprune, because we will remove parents anyway later on
            app.cl.remove_container(id, v=True)


@cli.command('export', help='Exports a volume, an image or a container', )
@click.argument('ident')
@click.pass_obj
def export(app, ident):
    docker = DockerHost(app.cl)

    m = docker.find_by_ident(ident)

    if len(m) == 0:
        app.exit_err('No container, image or volume found matching {}'.format(
            ident))

    if len(m) >= 2:
        for item in m:
            app.info(repr(item))
        app.exit_err('Multiple({}) matches for ident {!r}'.format(
            len(m), ident))

    click.echo(repr(m))


if __name__ == '__main__':
    cli()
