#!/usr/bin/python

# usflix: Launches a SOCKS5 tunnel via SSH, then runs a Netflix app via Google
# Chrome
#
# Assumes that there is $HOME/.usflixrc. Minimal content:
#
# [ssh]
# user = user
# host = host


# Copyright (c) 2015 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


from ConfigParser import SafeConfigParser
import os.path
import random
import subprocess
import time

cfg = SafeConfigParser()
cfg.read(os.path.expanduser('~/.usflixrc'))

ssh_opts = dict(cfg.items('ssh'))
socks_opts = dict(cfg.items('socks')) if cfg.has_section('socks') else {}
browser_opts = dict(cfg.items('browser')) if cfg.has_section('browser') else {}

socks_port = int(socks_opts.get('port', 0))

if socks_port == 0:
    socks_port = random.randrange(7000, 8000)

ssh_cmd = [
    'ssh',
    '-D{}'.format(socks_port),
    '-N',
]

if 'port' in ssh_opts:
    ssh_cmd.extend(['-p', ssh_opts['port']])

ssh_cmd.append('{0[user]}@{0[host]}'.format(ssh_opts))

ssh = subprocess.Popen(ssh_cmd)
try:
    # wait for socks connection
    print 'Waiting for SSH SOCKS to come up on port {}'.format(socks_port)
    time.sleep(int(ssh_opts.get('delay', 1)))

    data_dir = os.path.expanduser(browser_opts.get('data_dir', '~/.usflix'))
    browser = subprocess.Popen([
        browser_opts.get('exec', 'google-chrome'),
        '--app={}'.format(browser_opts.get('url', 'https://netflix.com')),
        '--user-data-dir={}'.format(data_dir),
        '--proxy-server=socks5://localhost:{}'.format(socks_port)
    ])

    print('All applications launched, waiting for exit...')
    browser.wait()
finally:
    ssh.kill()

print('done')
