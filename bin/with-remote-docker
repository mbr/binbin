#!/bin/sh

# with-remote-docker: Run docker commands on remote through SSH unix domain
# socket forwarding.
#
# Requires OpenSSH >= 6.7. Opens a tunnel to the remote /var/run/docker.sock
# socket, then executes the supplied command.
#
# Example:
#
#     with-remote-docker root@remote-host docker ps
#
# Or start a shell:
#
#     with-remote-docker root@remote-host $SHELL
#     hiro@wintermute:bin$ docker ps
#
# Works even with repl (make sure to install the Symbola font from
# ttf-ancients-fonts):
#
#     repl with-remote-docker root@my-server docker --prompt 'my-server 🐳 # '
#
#
# Copyright (c) 2015 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# FIXME: If this gets any bigger, port to Python!

set -e

if [ $# -lt 1 ]; then
  echo "usage: $(basename $0) SSH_HOST [CMD]"
  exit 1
fi;

# addr
SSH_ADDR=$1
shift

# create a temporary directory
TMPDIR=$(mktemp -d)
DOCKER_SOCK=$TMPDIR/docker.sock
REMOTE_DOCKER_SOCK=/var/run/docker.sock
SSH_SOCK=$TMPDIR/ssh.sock

on_exit() {
  # cleanup
  if [ -e $SSH_SOCK ]; then
    # suppress "Exit request sent."
    ssh -S $SSH_SOCK -O exit $SSH_ADDR 2> /dev/null
  fi;
  rm -f $DOCKER_SOCK $SSH_SOCK
  rmdir $TMPDIR
}

trap on_exit EXIT

# create new ssh master process
ssh -M -S $SSH_SOCK -nNTf -L $DOCKER_SOCK:$REMOTE_DOCKER_SOCK $SSH_ADDR

# export docker host
export DOCKER_HOST=unix://$DOCKER_SOCK

$@
