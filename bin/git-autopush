#!/bin/sh

# Copyright (c) 2020 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# pdfmail: Install a githook that automatically pushes to master each time a
#          a commit has been made.

set -eu

HOOKDIR=$(git rev-parse --git-dir)/hooks
HOOK="${HOOKDIR}/post-commit"
MODE=install

BRANCH=master
REMOTE=origin

if [ $# -eq 1 ]; then
    MODE=$1
fi;

do_install()
{
  if [ -e "${HOOK}" ]; then
    echo "refusing to change existing ${HOOK}"
    exit 1;
  fi;
  cat >> ${HOOK} <<END
#!/bin/sh
exec git autopush push
END
  chmod +x ${HOOK}
  echo "git autopush installed in ${HOOK}"
}

do_push()
{
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

  if [ "${CURRENT_BRANCH}" != "${BRANCH}" ]; then
    echo "autopush: not on branch ${BRANCH}, not pushing"
    exit 0
  fi

  if ! git remote get-url "${REMOTE}" 2> /dev/null; then
    echo "autopush: no remote ${REMOTE} defined. not pushing"
    exit 0
  fi;

  echo "autopush: automatically pushing ${BRANCH} to ${REMOTE}"
  git push origin master
}

case $MODE in
  install)
    do_install
  ;;
  push)
    do_push
  ;;
  *)
    echo "unknown mode ${MODE}"; exit 1;
  ;;
esac
