#!/usr/bin/env python3

# git-cl: Clone repository to well-known folder structure.

# Copyright (c) 2019 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import argparse
from dataclasses import dataclass
from typing import List
from urllib.parse import urlparse
import re
import os
import subprocess
import shutil

REPO_BASE = os.environ.get("REPO_BASE", "~/repos")
DOT_GIT = ".git"
HTTP_PREFIX = "http"
GIT_URL_RE = re.compile("^(?:(?P<user>[a-z]+)@)?(?P<host>[^@]*?):(?P<path>.*)$")


def add_to_autojump(path):
    """If `autojump` is found on path, add a directory to it"""
    autojump_bin = shutil.which("autojump")
    if autojump_bin:
        print("Adding {} to autojump".format(path))
        subprocess.check_call([autojump_bin, "--add", path])


@dataclass(frozen=True)
class CloneJob:
    """Single clone job."""

    git_url: str
    host: str
    repo: List[str]

    def run(self):
        """Clone repository tp REPO_BASE."""
        if len(self.repo) < 1:
            raise "Cannot clone into root"

        base = os.path.expanduser(REPO_BASE)
        parent = os.path.join(base, self.host, *self.repo[0:-1])
        dest = os.path.join(base, self.host, *self.repo)

        # Ensure parent directory exists.
        if not os.path.exists(parent):
            print("Creating {}".format(parent))
            os.makedirs(parent)

        assert os.path.isdir(parent)

        print("Cloning {} into {}".format(self.git_url, dest))
        subprocess.check_call(
            ["git", "clone", "--recursive", "--progress", self.git_url, dest]
        )

        add_to_autojump(dest)


def path_to_repo(p):
    """Extract name components from URL or Git path."""
    p = p.strip("/")
    if p.endswith(DOT_GIT):
        p = p[: -len(DOT_GIT)]
    return [c for c in p.split("/") if c not in (".", "..")]


def repo_url(s):
    """Argument parser for repository URLs."""
    s = s.strip()

    if s.startswith(HTTP_PREFIX):
        # Parse using URL parser if it is an HTTP address.
        u = urlparse(s)
        assert u.host not in (".", "..")

        return CloneJob(git_url=s, host=u.netloc, repo=path_to_repo(u.path))

        # Otherwise, use custom parser.
    m = GIT_URL_RE.match(s)
    if m:
        assert m.group("host") not in (".", "..")
        return CloneJob(
            git_url=s, host=m.group("host"), repo=path_to_repo(m.group("path"))
        )

    raise ValueError("Could not parse repo url {}".format(s))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Clone repository into {}".format(REPO_BASE)
    )
    parser.add_argument("urls", nargs="+", type=repo_url, help="repositories to clone")

    args = parser.parse_args()

    for job in args.urls:
        job.run()
