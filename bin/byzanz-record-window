#!/usr/bin/env python

# byzanz-record-window: Records a single window using byzanz. Inspired by
# http://askubuntu.com/questions/107726/
#   how-to-create-animated-gif-images-of-a-screencast
# but rewritten from scratch

# Copyright (c) 2015 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import print_function

import argparse
import os
import re
import subprocess

try:
    from pipes import quote as shell_quote
except ImportError:
    from shlex import quote as shell_quote

VAL_RE = re.compile('^  (.[^\n:]+): ([^\n]*)$', re.MULTILINE)
WIN_ID_RE = re.compile('Window id: (0x[0-9a-f]+)')


parser = argparse.ArgumentParser()
parser.add_argument('-w', '--wait', help='Exit recording once window closes',
                    action='store_true')
parser.add_argument('-f', '--force', help='Overwrite existing file',
                    action='store_true')
parser.add_argument('-c', '--crop', default=0, type=int,
                    help='Crop this many pixels around')
parser.add_argument('output_file', help='Output file, will be checked')
args, unknown = parser.parse_known_args()

if os.path.exists(args.output_file):
    if args.force:
        os.unlink(args.output_file)
    else:
        print('File already exists, byzanz will not overwrite existing files.')
        raise SystemExit(1)

cmd = ['byzanz-record']

print('Please click the window you wish to record')
output = subprocess.check_output(['xwininfo'])
vals = dict(VAL_RE.findall(output))
win_id = WIN_ID_RE.findall(output)[0]

delay = 0.01

if args.wait:
    # start shell that polls until the window is gone
    wait_cmd = "/bin/sh -c " + shell_quote(
        'while xprop -id {} 2> /dev/null 1>/dev/null;'
        'do sleep {}; done;'.format(win_id, delay))

    cmd.extend(['--exec', wait_cmd])

cmd.extend([
    '--x={}'.format(int(vals['Absolute upper-left X']) + args.crop),
    '--y={}'.format(int(vals['Absolute upper-left Y']) + args.crop),
    '--width={}'.format(int(vals['Width']) - args.crop),
    '--height={}'.format(int(vals['Height']) - args.crop),
])

cmd.extend(unknown)
cmd.append(args.output_file)

# call record
subprocess.check_call(cmd)
