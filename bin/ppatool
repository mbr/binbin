#!/usr/bin/env python

# ppatool: Use Ubuntu PPAs, without Ubuntu

# Copyright (c) 2015 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from collections import namedtuple
import re

import click
import requests

PPAName = namedtuple('PPAName', ['user', 'ppa'])

URL_ROOT = 'http://ppa.launchpad.net'


def ppa_name(s):
    if s.startswith('ppa:'):
        s = s[5:]

    parts = s.split('/', 1)
    if len(parts) != 2:
        raise ValueError('Invalid PPA: {}'.format(parts))
    return PPA(PPAName(*parts))


def parse_apache_listing(html):
    # this is a very dirty hack, but we do not want additional dependencies for
    # the script
    return re.findall('<td><a href="([^"]+)">', html)[1:]


class PPA(object):
    def __init__(self, name):
        self.name = name

    @property
    def base_url(self):
        return '{1}/{0.user}/{0.ppa}/ubuntu'.format(self.name, URL_ROOT)

    def get_dists(self):
        resp = requests.get(self.base_url + '/dists')
        resp.raise_for_status()

        return [url.rstrip('/') for url in parse_apache_listing(resp.text)]


@click.group(
    help='A tool to use Ubutun PPAs outside of Ubuntu, without adding them as '
    'a trusted source.')
@click.pass_obj
def cli(obj):
    pass


@cli.command('list', help='Print sources.list.d entries')
@click.argument('ppa', type=ppa_name)
def list_sources(ppa):
    for dist in ppa.get_dists():
        click.echo('deb {}/ubuntu {} main'.format(ppa.base_url, dist))
        click.echo('deb-src {}/ubuntu {} main'.format(ppa.base_url, dist))


if __name__ == '__main__':
    cli.main(obj={})
