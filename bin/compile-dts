#!/usr/bin/env python3

# compile-dts: Compile device tree files

# Copyright (c) 2016 Marc Brinkmann

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import os
import subprocess
import sys

import click


@click.command(
    help='Compiles kernel-style .dts files into .dtb files.\n\nThe Linux '
    'kernel device tree sources require preprocessing by a C++ compiler; '
    'this tool will call `cpp` to do that before handing it off to `dtc`.')
@click.argument('dts-file', type=click.Path(exists=True, dir_okay=False))
@click.option(
    '-I',
    '--include',
    help=('Extra include directories. You may want to give the root of '
          'your kernel sources here. Defaults to FILEPATH/include.'),
    multiple=True)
@click.option(
    '-o',
    '--output',
    type=click.Path(exists=False, writable=True, dir_okay=False),
    help='Output filename for binary device tree. Defaults to stdout')
def compile_dts(dts_file, include, output):
    if not include:
        include = (os.path.join(os.path.dirname(dts_file), 'include'), )

    # preprocessor call from
    # http://stackoverflow.com/questions/28502757/imx6-device-tree-compilation-fatal-error-unable-to-parse-input-tree
    args = ['cpp', '-nostdinc']
    for path in include:
        args.append('-I')
        args.append(path)
    args.extend([
        '-undef',  # no gcc-specific macros
        '-x',
        'assembler-with-cpp',
        dts_file
    ])

    # preprocess
    click.echo('Preprocessing {}'.format(dts_file))
    dts_src = subprocess.check_output(args)

    dtc = subprocess.Popen(
        ['dtc', '-I', 'dts', '-O', 'dtb'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE)
    result, _ = dtc.communicate(dts_src)

    if not output:
        sys.stdout.buffer.write(result)
    else:
        with open(output, 'wb') as out:
            out.write(result)


if __name__ == '__main__':
    compile_dts()
